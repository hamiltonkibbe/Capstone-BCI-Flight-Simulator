/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FlightGearGUI.java
 *
 * Created on Jan 24, 2011, 5:32:44 PM
 */
package capstone;

import java.awt.Color;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.io.IOException;
import java.net.InetAddress;

/**
 *
 * @author boris
 */
public class FlightGearGUI extends javax.swing.JFrame {

    public static DatagramSocket sendSock;
    public static DatagramSocket receiveSock;
    public static final int sendPort = 12346;
    public static final int receivePort = 12348;
    public static DatagramPacket receivePacket;
    public static DatagramPacket packet;
    public static InetAddress addr;
    public static boolean captureOn = false;

    public Thread guiThread;
   // public Runnable r;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        airspeed = new javax.swing.JTextField();
        verticalspeed = new javax.swing.JTextField();
        currentheading = new javax.swing.JTextField();
        autopilotheading = new javax.swing.JTextField();
        elevators = new javax.swing.JTextField();
        ailerons = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rudders = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        throttles = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        landinggear = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        parkingbrake = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        flap = new javax.swing.JTextField();
        finecontrol = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        airspeed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                airspeedMouseClicked(evt);
            }
        });
        airspeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airspeedActionPerformed(evt);
            }
        });

        elevators.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                elevatorsMouseClicked(evt);
            }
        });
        elevators.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elevatorsActionPerformed(evt);
            }
        });

        jLabel2.setText("Airspeed");

        jLabel3.setText("Vertical Speed");

        jLabel4.setText("Current Heading");

        jLabel5.setText("Autopilot Heading");

        jLabel6.setText("Elevator");

        jLabel7.setText("Aileron");

        jLabel8.setText("Rudder");

        jLabel9.setText("Throttle");

        jLabel10.setText("Flaps");

        jLabel11.setText("Landing Gear");

        jLabel12.setText("Parking Brake");

        jLabel13.setText("Fine Control");

        jButton1.setText("Start Capture");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(finecontrol, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(flap, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(parkingbrake, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(landinggear, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(throttles, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rudders, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ailerons)
                                .addComponent(verticalspeed, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(airspeed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                .addComponent(currentheading, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                .addComponent(autopilotheading, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                .addComponent(elevators, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(airspeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verticalspeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(currentheading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autopilotheading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(elevators, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ailerons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rudders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(throttles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(flap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(landinggear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(parkingbrake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(finecontrol, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        Runnable r = new Runnable() {
        @Override
        public void run() {
            try {
                sendSock = new DatagramSocket();
                receiveSock = new DatagramSocket(receivePort);
               // byte [] b = new byte[] {(byte)129,(byte)10,(byte)248,(byte)156};

                //addr = InetAddress.getByAddress(b);
                addr = InetAddress.getByName("localhost");
                sendSock.connect(addr, sendPort);

                while (true) {
                    String groundSpeed = getData("get double /velocities/groundspeed-kt\n");
                    String verticalSpeed = getData("get double /autopilot/settings/vertical-speed-fpm\n");
                    String currentHeading = getData("get double /orientation/heading-magnetic-deg\n");
                    String autopilotHeading = getData("get double /autopilot/settings/heading-bug-deg\n");
                    String elevator = getData("get double /controls/flight/elevator\n");
                    String aileron = getData("get double /controls/flight/aileron\n");
                    String rudder = getData("get double /controls/flight/rudder\n");
                    String throttle = getData("get double /controls/engines/engine/throttle\n");
                    String fineControl = getData("get double /logging/log/entry[1]/enabled\n");
                    String flaps = getData("get double /controls/flight/mainflaps\n");
                    String landingGear = getData("get bool /controls/gear/gear-down\n");
                    String parkingBrake = getData("get bool /controls/gear/brake-parking\n");
                    //System.out.println("Elevator: " + elevator);
                    airspeed.setText(groundSpeed.substring(0,6));
                    verticalspeed.setText(verticalSpeed.substring(0,6));
                    currentheading.setText(currentHeading.substring(0,6));
                    autopilotheading.setText(autopilotHeading.substring(0,6));
                    elevators.setText(elevator.substring(0,6));
                    ailerons.setText(aileron.substring(0,6));
                    rudders.setText(rudder.substring(0, 6));
                    throttles.setText(throttle.substring(0,6));
                    landinggear.setText(flaps.substring(0,6));
                    if(flaps.substring(0, 1).equals("0"))
                    {
                        flap.setText("Off");
                    }
                    else
                    {
                        flap.setText("On");
                    }

                    if(parkingBrake.substring(0, 1).equals("0"))
                    {
                        parkingbrake.setText("Off");
                    }
                    else
                    {
                        parkingbrake.setText("On");
                    }
                    
                    if(landingGear.substring(0, 1).equals("0"))
                    {
                        landinggear.setText("Up");
                    }
                    else
                    {
                        landinggear.setText("Down");
                    }

                    if(fineControl.substring(0,1).equals("0"))
                    {
                        finecontrol.setBackground(Color.green);
                        elevators.setBackground(Color.WHITE);
                        rudders.setBackground(Color.WHITE);
                        ailerons.setBackground(Color.WHITE);

                                             
                    }
                    else
                    {
                        finecontrol.setBackground(Color.red);
                        elevators.setBackground(Color.DARK_GRAY);
                        rudders.setBackground(Color.DARK_GRAY);
                        ailerons.setBackground(Color.DARK_GRAY);

                    }

                    Thread.sleep(100);
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Can't connect to localhost on port " + sendPort + ". Exiting...");
               // System.exit(0);
            }
        }
    };

    private void elevatorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elevatorsMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_elevatorsMouseClicked

    private void airspeedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_airspeedMouseClicked
       
    }//GEN-LAST:event_airspeedMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        captureOn = !captureOn;
        if(jButton1.getText().equals("Start Capture"))
        {
            jButton1.setText("Stop Capture");
        }
        else
        {
            jButton1.setText("Start Capture");
        }

        if (captureOn) {
            try {
                guiThread = new Thread(r);
                guiThread.start();
                
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Thread is not being created...");
                System.exit(0);
            }
        }
        else
        {
             //if (guiThread != null && guiThread.isAlive()) {
                guiThread.interrupt();
            // }
             sendSock.close();
             receiveSock.close();
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void airspeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airspeedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_airspeedActionPerformed

    private void elevatorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elevatorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_elevatorsActionPerformed
    private static void sendData(String setData) {
        try {
            String initialize = "0";
            byte[] sendBuffer = setData.getBytes();
            packet = new DatagramPacket(sendBuffer, sendBuffer.length);
            sendSock.send(packet);
            sendBuffer = initialize.getBytes();

        } catch (Exception e) {
            System.out.println("Problem sending the packet.");
            e.printStackTrace();
        }
    }

    private static String getData(String getData) {
        String resultData = "";
        try {
            String initialize = "0";
            byte[] sendBuffer = getData.getBytes();
            packet = new DatagramPacket(sendBuffer, sendBuffer.length);
            byte[] receiveBuffer = new byte[2048];
            receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            sendBuffer = initialize.getBytes();
            sendSock.send(packet);
            receiveSock.receive(receivePacket);
            resultData = new String(receivePacket.getData());
            receiveBuffer = initialize.getBytes();
        } catch (Exception e) {
            System.out.println("Problem sending the packet.");
            e.printStackTrace();
        }
        System.out.println("In getData function, return result data" + resultData);
        return resultData;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    FlightGearGUI fgGUI = new FlightGearGUI();
                    fgGUI.initComponents();
                    fgGUI.setVisible(true);
                    airspeed.setEditable(false);
                    airspeed.setBackground(Color.WHITE);
                    verticalspeed.setEditable(false);
                    verticalspeed.setBackground(Color.WHITE);
                    currentheading.setEditable(false);
                    currentheading.setBackground(Color.WHITE);
                    autopilotheading.setEditable(false);
                    autopilotheading.setBackground(Color.WHITE);
                    elevators.setEditable(false);
                    elevators.setBackground(Color.WHITE);
                    ailerons.setEditable(false);
                    ailerons.setBackground(Color.WHITE);
                    rudders.setEditable(false);
                    rudders.setBackground(Color.WHITE);
                    throttles.setEditable(false);
                    throttles.setBackground(Color.WHITE);
                    flap.setEditable(false);
                    flap.setBackground(Color.WHITE);
                    landinggear.setEditable(false);
                    landinggear.setBackground(Color.WHITE);
                    parkingbrake.setEditable(false);
                    parkingbrake.setBackground(Color.WHITE);
                    finecontrol.setEditable(false);
                    finecontrol.setBackground(Color.WHITE);
                    
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }

       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField ailerons;
    private static javax.swing.JTextField airspeed;
    private static javax.swing.JTextField autopilotheading;
    private static javax.swing.JTextField currentheading;
    private static javax.swing.JTextField elevators;
    private static javax.swing.JTextField finecontrol;
    private static javax.swing.JTextField flap;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private static javax.swing.JTextField landinggear;
    private static javax.swing.JTextField parkingbrake;
    private static javax.swing.JTextField rudders;
    private static javax.swing.JTextField throttles;
    private static javax.swing.JTextField verticalspeed;
    // End of variables declaration//GEN-END:variables
}
